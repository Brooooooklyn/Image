// prettier-ignore
/* eslint-disable */
/* auto-generated by NAPI-RS */

const { existsSync, readFileSync } = require('fs')
const { join } = require('path')

const { platform, arch } = process

let nativeBinding = null
let localFileExisted = false
let loadError = null

const isMusl = () => {
  let musl = false
  if (process.platform === 'linux') {
    musl = isMuslFromFilesystem()
    if (musl === null) {
      musl = isMuslFromReport()
    }
    if (musl === null) {
      musl = isMuslFromChildProcess()
    }
  }
  return musl
}

const isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-')

const isMuslFromFilesystem = () => {
  try {
    return readFileSync('/usr/bin/ldd', 'utf-8').includes('musl')
  } catch {
    return null
  }
}

const isMuslFromReport = () => {
  const report = typeof process.report.getReport === 'function' ? process.report.getReport() : null
  if (!report) {
    return null
  }
  if (report.header && report.header.glibcVersionRuntime) {
    return false
  }
  if (Array.isArray(report.sharedObjects)) {
    if (report.sharedObjects.some(isFileMusl)) {
      return true
    }
  }
  return false
}

const isMuslFromChildProcess = () => {
  try {
    return require('child_process').execSync('ldd --version', { encoding: 'utf8' }).includes('musl')
  } catch (e) {
    // If we reach this case, we don't know if the system is musl or not, so is better to just fallback to false
    return false
  }
}

switch (platform) {
  case 'android':
    switch (arch) {
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'image.android-arm64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./image.android-arm64.node')
          } else {
            nativeBinding = require('@napi-rs/image-android-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm':
        localFileExisted = existsSync(join(__dirname, 'image.android-arm-eabi.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./image.android-arm-eabi.node')
          } else {
            nativeBinding = require('@napi-rs/image-android-arm-eabi')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        loadError = new Error(`Unsupported architecture on Android ${arch}`)
    }
    break
  case 'win32':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(
          join(__dirname, 'image.win32-x64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./image.win32-x64-msvc.node')
          } else {
            nativeBinding = require('@napi-rs/image-win32-x64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'ia32':
        localFileExisted = existsSync(
          join(__dirname, 'image.win32-ia32-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./image.win32-ia32-msvc.node')
          } else {
            nativeBinding = require('@napi-rs/image-win32-ia32-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'image.win32-arm64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./image.win32-arm64-msvc.node')
          } else {
            nativeBinding = require('@napi-rs/image-win32-arm64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        loadError = new Error(`Unsupported architecture on Windows: ${arch}`)
    }
    break
  case 'darwin':
    localFileExisted = existsSync(join(__dirname, 'image.darwin-universal.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./image.darwin-universal.node')
      } else {
        nativeBinding = require('@napi-rs/image-darwin-universal')
      }
      break
    } catch {}
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'image.darwin-x64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./image.darwin-x64.node')
          } else {
            nativeBinding = require('@napi-rs/image-darwin-x64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'image.darwin-arm64.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./image.darwin-arm64.node')
          } else {
            nativeBinding = require('@napi-rs/image-darwin-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        loadError = new Error(`Unsupported architecture on macOS: ${arch}`)
    }
    break
  case 'freebsd':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'image.freebsd-x64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./image.freebsd-x64.node')
          } else {
            nativeBinding = require('@napi-rs/image-freebsd-x64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'image.freebsd-arm64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./image.freebsd-arm64.node')
          } else {
            nativeBinding = require('@napi-rs/image-freebsd-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        loadError = new Error(`Unsupported architecture on FreeBSD: ${arch}`)
    }
    break
  case 'linux':
    switch (arch) {
      case 'x64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'image.linux-x64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./image.linux-x64-musl.node')
            } else {
              nativeBinding = require('@napi-rs/image-linux-x64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'image.linux-x64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./image.linux-x64-gnu.node')
            } else {
              nativeBinding = require('@napi-rs/image-linux-x64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'image.linux-arm64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./image.linux-arm64-musl.node')
            } else {
              nativeBinding = require('@napi-rs/image-linux-arm64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'image.linux-arm64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./image.linux-arm64-gnu.node')
            } else {
              nativeBinding = require('@napi-rs/image-linux-arm64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm':
        localFileExisted = existsSync(
          join(__dirname, 'image.linux-arm-gnueabihf.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./image.linux-arm-gnueabihf.node')
          } else {
            nativeBinding = require('@napi-rs/image-linux-arm-gnueabihf')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'riscv64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'image.linux-riscv64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./image.linux-riscv64-musl.node')
            } else {
              nativeBinding = require('@napi-rs/image-linux-riscv64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'image.linux-riscv64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./image.linux-riscv64-gnu.node')
            } else {
              nativeBinding = require('@napi-rs/image-linux-riscv64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 's390x':
        localFileExisted = existsSync(
          join(__dirname, 'image.linux-s390x-gnu.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./image.linux-s390x-gnu.node')
          } else {
            nativeBinding = require('@napi-rs/image-linux-s390x-gnu')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        loadError = new Error(`Unsupported architecture on Linux: ${arch}`)
    }
    break
  default:
    loadError = new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)
}

if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
  try {
    nativeBinding = require('./image.wasi.cjs')
  } catch (err) {
    if (process.env.NAPI_RS_FORCE_WASI) {
      console.error(err)
    }
  }
  if (!nativeBinding) {
    try {
      nativeBinding = require('@napi-rs/image-wasm32-wasi')
    } catch (err) {
      if (process.env.NAPI_RS_FORCE_WASI) {
        console.error(err)
      }
    }
  }
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError
  }
  throw new Error(`Failed to load native binding`)
}

module.exports.Transformer = nativeBinding.Transformer
module.exports.ChromaSubsampling = nativeBinding.ChromaSubsampling
module.exports.CompressionType = nativeBinding.CompressionType
module.exports.compressJpeg = nativeBinding.compressJpeg
module.exports.compressJpegSync = nativeBinding.compressJpegSync
module.exports.FastResizeFilter = nativeBinding.FastResizeFilter
module.exports.FilterType = nativeBinding.FilterType
module.exports.JsColorType = nativeBinding.JsColorType
module.exports.losslessCompressPng = nativeBinding.losslessCompressPng
module.exports.losslessCompressPngSync = nativeBinding.losslessCompressPngSync
module.exports.Orientation = nativeBinding.Orientation
module.exports.pngQuantize = nativeBinding.pngQuantize
module.exports.pngQuantizeSync = nativeBinding.pngQuantizeSync
module.exports.PngRowFilter = nativeBinding.PngRowFilter
module.exports.ResizeFilterType = nativeBinding.ResizeFilterType
module.exports.ResizeFit = nativeBinding.ResizeFit
